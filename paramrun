#!/bin/sh

#Step 0: Determine if resource manager integration is enabled
if [ -n $LAUNCHER_RES_MAN ]
then
  if [ $LAUNCHER_RES_MAN == "SLURM" ]
  then
    #SLURM Integration: Let's set all appropriate variables
    echo "Launcher: Starting SLURM-integrated job $SLURM_JOB_ID."
    
    #Get the number of hosts (LAUNCHER_NHOSTS)
    if [ -z $LAUNCHER_NHOSTS ]
    then
      export LAUNCHER_NHOSTS=$SLURM_NNODES
    fi
    
    #Setup the hostfile (Cannot be overridden when scheduler integration is enabled)
    LAUNCHER_HOSTFILE=`mktemp $HOME/.launcher.${SLURM_JOB_ID}.hostfile.XXXXXXXX`
    scontrol show hostname $SLURM_NODELIST > $LAUNCHER_HOSTFILE

    #Set the number of processes per node (LAUNCHER_PPN)
    if [ -z $LAUNCHER_PPN ]
    then
      export LAUNCHER_PPN=`echo $SLURM_TASKS_PER_NODE | awk -F '(' '{print $1}'`
    fi

    #Set the number of total processes (LAUNCHER_NHOSTS * LAUNCHER_PPN)
    export LAUNCHER_NPROCS=`expr $LAUNCHER_NHOSTS * $LAUNCHER_PPN`

  elif [ $LAUNCHER_RES_MAN == "SGE" ]
  then
    #SGE Integration: Let's set all appropriate variables
    echo "Launcher: Starting SGE-integrated job $JOB_ID."

    #Get the number of hosts (LAUNCHER_NHOSTS)
    if [ -z $LAUNCHER_NHOSTS ]
    then
      export LAUNCHER_NHOSTS=`wc -l $PE_HOSTFILE`
    fi
    
    #Setup the hostfile (Cannot be overridden when scheduler integration is enabled)
    LAUNCHER_HOSTFILE=`mktemp $HOME/.launcher.${JOB_ID}.hostfile.XXXXXXXX`
    cat $PE_HOSTFILE | cut -f 1 -d ' ' > $LAUNCHER_HOSTFILE

    #Set the number of processes per node (LAUNCHER_PPN)
    if [ -z $LAUNCHER_PPN ]
    then
      export LAUNCHER_PPN=`echo $PE | sed -e 's/way//g;'`
    fi

    #Set the number of total processes (LAUNCHER_NHOSTS * LAUNCHER_PPN)
    export LAUNCHER_NPROCS=`expr $LAUNCHER_NHOSTS * $LAUNCHER_PPN`

  else
    #Unrecognized scheduler. Print an error message
    echo "WARNING: $LAUNCHER_RES_MAN is not a recognized resource manager." >&2
    echo "         Available options are: SLURM, SGE" >&2
    echo "         Defaulting to no integration." >&2
  fi
else
  echo "Launcher: Starting manual job (no resource manager integration)."
fi

#Step 1: Ensure that LAUNCHER_HOSTFILE is set and valid
if [ -n $LAUNCHER_HOSTFILE ]
then
  if [ ! -f $LAUNCHER_HOSTFILE ]
  then
    echo "ERROR: Hostfile ($LAUNCHER_HOSTFILE) not found." >&2
    exit
  fi
else
  echo "ERROR: \$LAUNCHER_HOSTFILE is not set." >&2
  exit
fi

#Step 2: Ensure that necessary variables are set
if [ -z $LAUNCHER_PPN ]
  echo "ERROR: LAUNCHER_PPN is not set." >&2
  exit
fi

if [ -z $LAUNCHER_NHOSTS ]
  echo "ERROR: LAUNCHER_NHOSTS is not set." >&2
  exit
fi

if [ -z $LAUNCHER_NPROCS ]
  echo "ERROR: LAUNCHER_NPROCS is not set." >&2
  exit
fi

#Step 3: Ensure that CONTROL_FILE exists
if [ -n $LAUNCHER_JOB_FILE ]
then
  if [ -f $LAUNCHER_JOB_FILE ]
  then
    export LAUNCHER_NJOBS=`wc -l $LAUNCHER_JOB_FILE`
  else
    echo "ERROR: LAUNCHER_JOB_FILE ($LAUNCHER_JOB_FILE) not found." >&2
  fi
else
  echo "ERROR: LAUNCHER_JOB_FILE not set." >&2
fi

#Step 4: Setup Xeon Phi support
if [ -n $LAUNCHER_NPHI -a $LAUNCHER_NPHI -ne "0"]
then
  echo "Launcher: Setting up Intel Xeon Phi support."
  LAUNCHER_USE_PHI=1
else
  LAUNCHER_USE_PHI=0
fi

#Step 5: Scheduling setup
if [ -n $LAUNCHER_SCHED -a $LAUNCHER_SCHED == "dynamic" ]; then
  #Start tskserver
  $LAUNCHER_DIR/tskserver $LAUNCHER_NJOBS 9471 2>/dev/null &
  export LAUNCHER_DYN_COUNT="$HOSTNAME 9471"
  if [ $LAUNCHER_USE_PHI -ne "0" ]; then
    #Start another tskserver for the Intel Xeon Phi cards
    $LAUNCHER_DIR/tskserver `wc -l $PHI_WORKDIR/$PHI_CONTROL_FILE` 9472 2>/dev/null &
    export LAUNCHER_PHI_DYN_COUNT="$HOSTNAME 9472"
  fi
fi

#------------------------------
# Let's finally launch the job
#------------------------------

echo "Launcher: Setup complete."
echo "   Number of hosts:    $LAUNCHER_NHOSTS"
echo "   Processes per host: $LAUNCHER_PPN"
echo "   Total processes:    $LAUNCHER_NPROCS"
echo "   Total jobs:         $LAUNCHER_NJOBS"
echo "   Scheduling method:  $LAUNCHER_SCHED"
echo
if [ $LAUNCHER_USE_PHI -eq 1 ]
then
  echo "--- Xeon Phi Support Enabled ---"
  echo "   Cards per host:     $LAUNCHER_NPHI"
  echo "   Processes per card: $LAUNCHER_PHI_PPN"
  echo
fi
echo "Launcher: Starting parallel tasks..."

i=0
for host in `cat $LAUNCHER_HOSTFILE`
do
  ssh $host "cd `pwd`; env `/sge_common/default/pe_scripts/build_env.pl` LAUNCHER_NHOSTS=$np LAUNCHER_HOST_ID=$i $*" &
  i=`expr $i + 1`
done
wait

res=$?

if [ $res -ne 0 ]; then
  echo "Launcher: Parametric job exited with code: $res"
else
  echo "Launcher: Parametric job exited without errors"
fi

exit $res
